{"ast":null,"code":"import auth0 from '../utils/auth0';\nimport { table } from '../utils/Airtable';\n\nconst ownsRecord = handler => auth0.requireAuthentication(async (req, res) => {\n  const {\n    user\n  } = await auth0.getSession(req);\n  const {\n    id\n  } = req.body;\n\n  try {\n    const existingRecord = await table.find(id);\n\n    if (!existingRecord || user.sub !== existingRecord.fields.userId) {\n      return res.status(404).json({\n        msg: 'Record not found'\n      });\n    }\n\n    req.record = existingRecord;\n    return handler(req, res);\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      msg: 'Something went wrong'\n    });\n  }\n});\n\nexport default ownsRecord;","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/middleware/OwnsRecord.js"],"names":["auth0","table","ownsRecord","handler","requireAuthentication","req","res","user","getSession","id","body","existingRecord","find","sub","fields","userId","status","json","msg","record","e","console","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;AAEA,MAAMC,UAAU,GAAGC,OAAO,IACxBH,KAAK,CAACI,qBAAN,CAA4B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMP,KAAK,CAACQ,UAAN,CAAiBH,GAAjB,CAAvB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAASJ,GAAG,CAACK,IAAnB;;AACA,MAAI;AACF,UAAMC,cAAc,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWH,EAAX,CAA7B;;AACA,QAAI,CAACE,cAAD,IAAmBJ,IAAI,CAACM,GAAL,KAAaF,cAAc,CAACG,MAAf,CAAsBC,MAA1D,EAAkE;AAChE,aAAOT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAArB,CAAP;AACD;;AACDb,IAAAA,GAAG,CAACc,MAAJ,GAAaR,cAAb;AACA,WAAOR,OAAO,CAACE,GAAD,EAAMC,GAAN,CAAd;AACD,GAPD,CAOE,OAAOc,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,WAAOd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD;AACF,CAdD,CADF;;AAiBA,eAAehB,UAAf","sourcesContent":["import auth0 from '../utils/auth0'\nimport { table } from '../utils/Airtable'\n\nconst ownsRecord = handler =>\n  auth0.requireAuthentication(async (req, res) => {\n    const { user } = await auth0.getSession(req)\n    const { id } = req.body\n    try {\n      const existingRecord = await table.find(id)\n      if (!existingRecord || user.sub !== existingRecord.fields.userId) {\n        return res.status(404).json({ msg: 'Record not found' })\n      }\n      req.record = existingRecord\n      return handler(req, res)\n    } catch (e) {\n      console.error(e)\n      return res.status(500).json({ msg: 'Something went wrong' })\n    }\n  })\n\nexport default ownsRecord\n"]},"metadata":{},"sourceType":"module"}