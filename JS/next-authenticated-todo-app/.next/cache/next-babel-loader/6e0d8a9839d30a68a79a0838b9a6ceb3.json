{"ast":null,"code":"const Airtable = require('airtable');\n\nAirtable.configure({\n  apiKey: process.env.AIRTABLE_API_KEY\n});\nconst base = Airtable.base(process.env.AIRTABLE_BASE_ID);\nconst table = base(process.env.AIRTABLE_TABLE_NAME);\n\nconst getMinifiedRecord = record => {\n  var _record$fields;\n\n  if (!((_record$fields = record.fields) === null || _record$fields === void 0 ? void 0 : _record$fields.completed)) {\n    record.fields.completed = false;\n  }\n\n  return {\n    id: record.id,\n    fields: record.fields\n  };\n};\n\nconst getMinifiedRecords = records => {\n  return records.map(getMinifiedRecord);\n};\n\nclass AirtableDatabase {\n  constructor(table) {\n    this.table = table;\n  }\n\n  async getAll({\n    filter\n  }) {\n    const data = await this.table.select({\n      filterByFormula: `${filter.field} = '${filter.value}'`\n    }).firstPage();\n    return getMinifiedRecords(data);\n  }\n\n  async updateOne({\n    id,\n    fields\n  }) {\n    const updatedRecords = await this.table.update([{\n      id,\n      fields\n    }]);\n    return getMinifiedRecord(updatedRecords[0]);\n  }\n\n  async deleteOne({\n    id\n  }) {\n    const deletedRecords = await table.destroy([id]);\n    return getMinifiedRecord(deletedRecords[0]);\n  }\n\n  async createOne() {\n    const createdRecords = await table.create([{\n      fields\n    }]);\n    const createdRecord = {\n      id: createdRecords[0].id,\n      fields: createdRecords[0].fields\n    };\n    return createdRecord;\n  }\n\n}\n\nconst airtableDatabase = new AirtableDatabase(table);\nexport { airtableDatabase, table, getMinifiedRecords, getMinifiedRecord };","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/utils/Airtable.js"],"names":["Airtable","require","configure","apiKey","process","env","AIRTABLE_API_KEY","base","AIRTABLE_BASE_ID","table","AIRTABLE_TABLE_NAME","getMinifiedRecord","record","fields","completed","id","getMinifiedRecords","records","map","AirtableDatabase","constructor","getAll","filter","data","select","filterByFormula","field","value","firstPage","updateOne","updatedRecords","update","deleteOne","deletedRecords","destroy","createOne","createdRecords","create","createdRecord","airtableDatabase"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAD,QAAQ,CAACE,SAAT,CAAmB;AACjBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADH,CAAnB;AAGA,MAAMC,IAAI,GAAGP,QAAQ,CAACO,IAAT,CAAcH,OAAO,CAACC,GAAR,CAAYG,gBAA1B,CAAb;AAEA,MAAMC,KAAK,GAAGF,IAAI,CAACH,OAAO,CAACC,GAAR,CAAYK,mBAAb,CAAlB;;AAEA,MAAMC,iBAAiB,GAAGC,MAAM,IAAI;AAAA;;AAClC,MAAI,oBAACA,MAAM,CAACC,MAAR,mDAAC,eAAeC,SAAhB,CAAJ,EAA+B;AAC7BF,IAAAA,MAAM,CAACC,MAAP,CAAcC,SAAd,GAA0B,KAA1B;AACD;;AACD,SAAO;AACLC,IAAAA,EAAE,EAAEH,MAAM,CAACG,EADN;AAELF,IAAAA,MAAM,EAAED,MAAM,CAACC;AAFV,GAAP;AAID,CARD;;AAUA,MAAMG,kBAAkB,GAAGC,OAAO,IAAI;AACpC,SAAOA,OAAO,CAACC,GAAR,CAAYP,iBAAZ,CAAP;AACD,CAFD;;AAIA,MAAMQ,gBAAN,CAAuB;AACrBC,EAAAA,WAAW,CAACX,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACD;;AACD,QAAMY,MAAN,CAAa;AAAEC,IAAAA;AAAF,GAAb,EAAyB;AACvB,UAAMC,IAAI,GAAG,MAAM,KAAKd,KAAL,CAChBe,MADgB,CACT;AACNC,MAAAA,eAAe,EAAG,GAAEH,MAAM,CAACI,KAAM,OAAMJ,MAAM,CAACK,KAAM;AAD9C,KADS,EAIhBC,SAJgB,EAAnB;AAMA,WAAOZ,kBAAkB,CAACO,IAAD,CAAzB;AACD;;AACD,QAAMM,SAAN,CAAgB;AAAEd,IAAAA,EAAF;AAAMF,IAAAA;AAAN,GAAhB,EAAgC;AAC9B,UAAMiB,cAAc,GAAG,MAAM,KAAKrB,KAAL,CAAWsB,MAAX,CAAkB,CAAC;AAAEhB,MAAAA,EAAF;AAAMF,MAAAA;AAAN,KAAD,CAAlB,CAA7B;AACA,WAAOF,iBAAiB,CAACmB,cAAc,CAAC,CAAD,CAAf,CAAxB;AACD;;AACD,QAAME,SAAN,CAAgB;AAACjB,IAAAA;AAAD,GAAhB,EAAsB;AACpB,UAAMkB,cAAc,GAAG,MAAMxB,KAAK,CAACyB,OAAN,CAAc,CAACnB,EAAD,CAAd,CAA7B;AACA,WAAOJ,iBAAiB,CAACsB,cAAc,CAAC,CAAD,CAAf,CAAxB;AACD;;AACD,QAAME,SAAN,GAAkB;AAChB,UAAMC,cAAc,GAAG,MAAM3B,KAAK,CAAC4B,MAAN,CAAa,CACxC;AACExB,MAAAA;AADF,KADwC,CAAb,CAA7B;AAKA,UAAMyB,aAAa,GAAG;AACpBvB,MAAAA,EAAE,EAAEqB,cAAc,CAAC,CAAD,CAAd,CAAkBrB,EADF;AAEpBF,MAAAA,MAAM,EAAEuB,cAAc,CAAC,CAAD,CAAd,CAAkBvB;AAFN,KAAtB;AAIA,WAAOyB,aAAP;AACD;;AAhCoB;;AAkCvB,MAAMC,gBAAgB,GAAG,IAAIpB,gBAAJ,CAAqBV,KAArB,CAAzB;AAEA,SAAS8B,gBAAT,EAA2B9B,KAA3B,EAAkCO,kBAAlC,EAAsDL,iBAAtD","sourcesContent":["const Airtable = require('airtable')\nAirtable.configure({\n  apiKey: process.env.AIRTABLE_API_KEY,\n})\nconst base = Airtable.base(process.env.AIRTABLE_BASE_ID)\n\nconst table = base(process.env.AIRTABLE_TABLE_NAME)\n\nconst getMinifiedRecord = record => {\n  if (!record.fields?.completed) {\n    record.fields.completed = false\n  }\n  return {\n    id: record.id,\n    fields: record.fields,\n  }\n}\n\nconst getMinifiedRecords = records => {\n  return records.map(getMinifiedRecord)\n}\n\nclass AirtableDatabase {\n  constructor(table) {\n    this.table = table\n  }\n  async getAll({ filter }) {\n    const data = await this.table\n      .select({\n        filterByFormula: `${filter.field} = '${filter.value}'`,\n      })\n      .firstPage()\n\n    return getMinifiedRecords(data)\n  }\n  async updateOne({ id, fields }) {\n    const updatedRecords = await this.table.update([{ id, fields }])\n    return getMinifiedRecord(updatedRecords[0])\n  }\n  async deleteOne({id}) {\n    const deletedRecords = await table.destroy([id])\n    return getMinifiedRecord(deletedRecords[0])\n  }\n  async createOne() {\n    const createdRecords = await table.create([\n      {\n        fields\n      },\n    ])\n    const createdRecord = {\n      id: createdRecords[0].id,\n      fields: createdRecords[0].fields,\n    }\n    return createdRecord\n  }\n}\nconst airtableDatabase = new AirtableDatabase(table)\n\nexport { airtableDatabase, table, getMinifiedRecords, getMinifiedRecord }\n"]},"metadata":{},"sourceType":"module"}