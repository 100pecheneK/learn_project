{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js\";\nimport { createContext, useState, useRef } from 'react';\nconst TodosContext = /*#__PURE__*/createContext();\n\nconst useDeleteTodo = ({\n  id,\n  abortController = new AbortController()\n}) => {\n  if (!id) return [null, null];\n  const {\n    signal,\n    abort\n  } = abortController || {};\n  console.log(id);\n  const todoRequest = fetch('/api/deleteTodo', {\n    signal: signal,\n    body: JSON.stringify({\n      id\n    }),\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return [todoRequest, abort === null || abort === void 0 ? void 0 : abort.bind(abortController)];\n};\n\nconst TodosProvider = ({\n  children\n}) => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]);\n  const {\n    0: todoIdToDelete,\n    1: setIdToDelete\n  } = useState(null);\n  const [todoRequest, abortTodoRequest] = useDeleteTodo({\n    id: todoIdToDelete\n  });\n  const abortFuncs = useRef([]);\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos');\n      const latestTodos = await res.json();\n      setTodos(latestTodos);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({\n          description\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newTodo = await res.json();\n      setTodos(prevTodos => [newTodo, ...prevTodos]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos];\n        const existingTodo = existingTodos.find(todo => todo.id === updatedTodo.id);\n        existingTodo.fields = updatedTodo.fields;\n        return existingTodos;\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      setIdToDelete(id);\n      abortFuncs.current.unshift(abortTodoRequest);\n      const newTodoRequest = await todoRequest;\n      const todo = await todoRequest.json();\n      console.log(todo); // await fetch('/api/deleteTodo', {\n      //   method: 'DELETE',\n      //   body: JSON.stringify({ id }),\n      //   headers: { 'Content-Type': 'application/json' },\n      // })\n\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosContext.Provider, {\n    value: {\n      todos,\n      setTodos,\n      refreshTodos,\n      updateTodo,\n      addTodo,\n      deleteTodo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\nexport { TodosProvider, TodosContext };","map":{"version":3,"sources":["/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js"],"names":["createContext","useState","useRef","TodosContext","useDeleteTodo","id","abortController","AbortController","signal","abort","console","log","todoRequest","fetch","body","JSON","stringify","method","headers","bind","TodosProvider","children","todos","setTodos","todoIdToDelete","setIdToDelete","abortTodoRequest","abortFuncs","refreshTodos","res","latestTodos","json","e","error","addTodo","description","newTodo","prevTodos","updateTodo","updatedTodo","existingTodos","existingTodo","find","todo","fields","deleteTodo","current","unshift","newTodoRequest","filter"],"mappings":"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","sourcesContent":["import { createContext, useState, useRef } from 'react'\nconst TodosContext = createContext()\n\nconst useDeleteTodo = ({ id, abortController = new AbortController() }) => {\n  if (!id) return [null, null]\n  const { signal, abort } = abortController || {}\n  console.log(id)\n  const todoRequest = fetch('/api/deleteTodo', {\n    signal: signal,\n    body: JSON.stringify({ id }),\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n  })\n  \n  return [todoRequest, abort?.bind(abortController)]\n}\n\nconst TodosProvider = ({ children }) => {\n  const [todos, setTodos] = useState([])\n  const [todoIdToDelete, setIdToDelete] = useState(null)\n  const [todoRequest, abortTodoRequest] = useDeleteTodo({\n    id: todoIdToDelete,\n  })\n\n  const abortFuncs = useRef([])\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos')\n      const latestTodos = await res.json()\n      setTodos(latestTodos)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({ description }),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      const newTodo = await res.json()\n      setTodos(prevTodos => [newTodo, ...prevTodos])\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos]\n        const existingTodo = existingTodos.find(\n          todo => todo.id === updatedTodo.id\n        )\n        existingTodo.fields = updatedTodo.fields\n        return existingTodos\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const deleteTodo = async id => {\n    try {\n      setIdToDelete(id)\n      abortFuncs.current.unshift(abortTodoRequest)\n      const newTodoRequest = await todoRequest\n      const todo = await todoRequest.json()\n      console.log(todo)\n      // await fetch('/api/deleteTodo', {\n      //   method: 'DELETE',\n      //   body: JSON.stringify({ id }),\n      //   headers: { 'Content-Type': 'application/json' },\n      // })\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id))\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <TodosContext.Provider\n      value={{ todos, setTodos, refreshTodos, updateTodo, addTodo, deleteTodo }}\n    >\n      {children}\n    </TodosContext.Provider>\n  )\n}\nexport { TodosProvider, TodosContext }\n"]},"metadata":{},"sourceType":"module"}