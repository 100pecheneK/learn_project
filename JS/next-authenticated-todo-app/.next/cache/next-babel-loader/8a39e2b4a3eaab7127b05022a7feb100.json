{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport TodoModel from './Mongo/models/Todo';\nimport mongoose from 'mongoose';\nconst connection = {\n  isConnected: false\n};\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return;\n  }\n\n  try {\n    const dbConnection = await mongoose.connect(process.env.MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    connection.isConnected = !!dbConnection.connections[0].readyState;\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`);\n  }\n};\n\nclass MongoDatabase {\n  async getAll({\n    filter\n  }) {\n    const data = await TodoModel.find({\n      [filter.field]: filter.value\n    });\n    return data;\n  }\n\n  async updateOne({\n    id,\n    fields\n  }) {\n    const updatedRecords = await this.table.update([{\n      id,\n      fields\n    }]);\n    return getMinifiedRecord(updatedRecords[0]);\n  }\n\n  async deleteOne({\n    id\n  }) {\n    const deletedRecords = await table.destroy([id]);\n    return getMinifiedRecord(deletedRecords[0]);\n  }\n\n  async createOne({\n    fields\n  }) {\n    console.log(fields);\n    const createdRecord = new TodoModel({\n      fields: _objectSpread(_objectSpread({}, fields), {}, {\n        completed: false\n      })\n    });\n    await createdRecord.save();\n    return createdRecord;\n  }\n\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase();\n    this.connectDb = connectDb;\n  }\n\n  async getAll(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.getAll(...props);\n  }\n\n  async updateOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.updateOne(...props);\n  }\n\n  async deleteOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.deleteOne(...props);\n  }\n\n  async create(...props) {\n    this.connectDb();\n    throw await this.mongoDatabase.createOne(...props);\n  }\n\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb);\nexport { mongoDatabase };","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/utils/Mongo.js"],"names":["TodoModel","mongoose","connection","isConnected","connectDb","dbConnection","connect","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","connections","readyState","err","console","error","message","MongoDatabase","getAll","filter","data","find","field","value","updateOne","id","fields","updatedRecords","table","update","getMinifiedRecord","deleteOne","deletedRecords","destroy","createOne","log","createdRecord","completed","save","MongoDatabaseProxy","constructor","mongoDatabase","props","create"],"mappings":"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","sourcesContent":["import TodoModel from './Mongo/models/Todo'\nimport mongoose from 'mongoose'\n\nconst connection = {\n  isConnected: false,\n}\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return\n  }\n  try {\n    const dbConnection = await mongoose.connect(process.env.MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    })\n    connection.isConnected = !!dbConnection.connections[0].readyState\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`)\n  }\n}\n\nclass MongoDatabase {\n  async getAll({ filter }) {\n    const data = await TodoModel.find({ [filter.field]: filter.value })\n    return data\n  }\n  async updateOne({ id, fields }) {\n    const updatedRecords = await this.table.update([{ id, fields }])\n    return getMinifiedRecord(updatedRecords[0])\n  }\n  async deleteOne({ id }) {\n    const deletedRecords = await table.destroy([id])\n    return getMinifiedRecord(deletedRecords[0])\n  }\n  async createOne({ fields }) {\n    console.log(fields)\n    const createdRecord = new TodoModel({\n      fields: { ...fields, completed: false },\n    })\n    await createdRecord.save()\n    return createdRecord\n  }\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase()\n    this.connectDb = connectDb\n  }\n  async getAll(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.getAll(...props)\n  }\n  async updateOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.updateOne(...props)\n  }\n  async deleteOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.deleteOne(...props)\n  }\n  async create(...props) {\n    this.connectDb()\n    throw await this.mongoDatabase.createOne(...props)\n  }\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb)\n\nexport { mongoDatabase }\n"]},"metadata":{},"sourceType":"module"}