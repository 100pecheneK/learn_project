{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js\";\nimport { createContext, useState, useRef } from 'react';\nconst TodosContext = /*#__PURE__*/createContext();\n\nconst useDeleteTodo = ({\n  id,\n  abortController = new AbortController()\n}) => {\n  if (!id) return;\n  const {\n    signal,\n    abort\n  } = abortController || {};\n  const todoRequest = fetch('/api/deleteTodo', {\n    signal: signal,\n    body: JSON.stringify({\n      id\n    }),\n    method: 'DELETE'\n  });\n  return [todoRequest, abort === null || abort === void 0 ? void 0 : abort.bind(abortController)];\n};\n\nconst TodosProvider = ({\n  children\n}) => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]);\n  const {\n    0: todoIdToDelete,\n    1: setIdToDelete\n  } = useState(null);\n  const [todoRequest, abortTodoRequest] = useDeleteTodo({\n    id: todoIdToDelete\n  });\n  const abortFuncs = useRef([]);\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos');\n      const latestTodos = await res.json();\n      setTodos(latestTodos);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({\n          description\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newTodo = await res.json();\n      setTodos(prevTodos => [newTodo, ...prevTodos]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos];\n        const existingTodo = existingTodos.find(todo => todo.id === updatedTodo.id);\n        existingTodo.fields = updatedTodo.fields;\n        return existingTodos;\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      abortFuncs.current.unshift(abortTodoRequest);\n      await fetch('/api/deleteTodo', {\n        method: 'DELETE',\n        body: JSON.stringify({\n          id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosContext.Provider, {\n    value: {\n      todos,\n      setTodos,\n      refreshTodos,\n      updateTodo,\n      addTodo,\n      deleteTodo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\nexport { TodosProvider, TodosContext };","map":{"version":3,"sources":["/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js"],"names":["createContext","useState","useRef","TodosContext","useDeleteTodo","id","abortController","AbortController","signal","abort","todoRequest","fetch","body","JSON","stringify","method","bind","TodosProvider","children","todos","setTodos","todoIdToDelete","setIdToDelete","abortTodoRequest","abortFuncs","refreshTodos","res","latestTodos","json","e","console","error","addTodo","description","headers","newTodo","prevTodos","updateTodo","updatedTodo","existingTodos","existingTodo","find","todo","fields","deleteTodo","current","unshift","filter"],"mappings":"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","sourcesContent":["import { createContext, useState, useRef } from 'react'\nconst TodosContext = createContext()\n\nconst useDeleteTodo = ({ id, abortController = new AbortController() }) => {\n  if (!id) return\n  const { signal, abort } = abortController || {}\n  const todoRequest = fetch('/api/deleteTodo', {\n    signal: signal,\n    body: JSON.stringify({ id }),\n    method: 'DELETE',\n  })\n\n  return [todoRequest, abort?.bind(abortController)]\n}\n\nconst TodosProvider = ({ children }) => {\n  const [todos, setTodos] = useState([])\n  const [todoIdToDelete, setIdToDelete] = useState(null)\n  const [todoRequest, abortTodoRequest] = useDeleteTodo({\n    id: todoIdToDelete,\n  })\n\n  const abortFuncs = useRef([])\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos')\n      const latestTodos = await res.json()\n      setTodos(latestTodos)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({ description }),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      const newTodo = await res.json()\n      setTodos(prevTodos => [newTodo, ...prevTodos])\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos]\n        const existingTodo = existingTodos.find(\n          todo => todo.id === updatedTodo.id\n        )\n        existingTodo.fields = updatedTodo.fields\n        return existingTodos\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const deleteTodo = async id => {\n    try {\n      abortFuncs.current.unshift(abortTodoRequest)\n\n      await fetch('/api/deleteTodo', {\n        method: 'DELETE',\n        body: JSON.stringify({ id }),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id))\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <TodosContext.Provider\n      value={{ todos, setTodos, refreshTodos, updateTodo, addTodo, deleteTodo }}\n    >\n      {children}\n    </TodosContext.Provider>\n  )\n}\nexport { TodosProvider, TodosContext }\n"]},"metadata":{},"sourceType":"module"}