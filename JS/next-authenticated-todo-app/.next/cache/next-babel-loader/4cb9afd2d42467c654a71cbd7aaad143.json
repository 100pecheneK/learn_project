{"ast":null,"code":"import database from './utils/Database';\nimport auth0 from './utils/auth0';\nexport default auth0.requireAuthentication(async (req, res) => {\n  const {\n    user\n  } = await auth0.getSession(req);\n  const {\n    id\n  } = req.body;\n\n  try {\n    const existingRecord = await database.findById({\n      id\n    });\n\n    if (!existingRecord || user.sub !== existingRecord.fields.userId) {\n      return res.status(404).json({\n        msg: 'Record not found'\n      });\n    }\n\n    const deletedRecord = await database.deleteOne({\n      id\n    });\n    return res.json(deletedRecord);\n  } catch (e) {\n    console.log(e);\n    return res.status(500).json({\n      mgs: 'Somethig went wrong'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/deleteTodo.js"],"names":["database","auth0","requireAuthentication","req","res","user","getSession","id","body","existingRecord","findById","sub","fields","userId","status","json","msg","deletedRecord","deleteOne","e","console","log","mgs"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,eAAeA,KAAK,CAACC,qBAAN,CAA4B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,KAAK,CAACK,UAAN,CAAiBH,GAAjB,CAAvB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAASJ,GAAG,CAACK,IAAnB;;AACA,MAAI;AACF,UAAMC,cAAc,GAAG,MAAMT,QAAQ,CAACU,QAAT,CAAkB;AAAEH,MAAAA;AAAF,KAAlB,CAA7B;;AACA,QAAI,CAACE,cAAD,IAAmBJ,IAAI,CAACM,GAAL,KAAaF,cAAc,CAACG,MAAf,CAAsBC,MAA1D,EAAkE;AAChE,aAAOT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAArB,CAAP;AACD;;AACD,UAAMC,aAAa,GAAG,MAAMjB,QAAQ,CAACkB,SAAT,CAAmB;AAAEX,MAAAA;AAAF,KAAnB,CAA5B;AACA,WAAOH,GAAG,CAACW,IAAJ,CAASE,aAAT,CAAP;AACD,GAPD,CAOE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAOf,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD;AACF,CAdc,CAAf","sourcesContent":["import database from './utils/Database'\nimport auth0 from './utils/auth0'\n\nexport default auth0.requireAuthentication(async (req, res) => {\n  const { user } = await auth0.getSession(req)\n  const { id } = req.body\n  try {\n    const existingRecord = await database.findById({ id })\n    if (!existingRecord || user.sub !== existingRecord.fields.userId) {\n      return res.status(404).json({ msg: 'Record not found' })\n    }\n    const deletedRecord = await database.deleteOne({ id })\n    return res.json(deletedRecord)\n  } catch (e) {\n    console.log(e)\n    return res.status(500).json({ mgs: 'Somethig went wrong' })\n  }\n})\n"]},"metadata":{},"sourceType":"module"}