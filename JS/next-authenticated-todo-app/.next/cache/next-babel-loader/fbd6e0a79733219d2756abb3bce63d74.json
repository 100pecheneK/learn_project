{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Database from './Database';\n\nvar Airtable = require('airtable');\n\nAirtable.configure({\n  apiKey: process.env.AIRTABLE_API_KEY\n});\nvar base = Airtable.base(process.env.AIRTABLE_BASE_ID);\nvar table = base(process.env.AIRTABLE_TABLE_NAME);\n\nvar getMinifiedRecord = function getMinifiedRecord(record) {\n  var _record$fields;\n\n  if (!((_record$fields = record.fields) === null || _record$fields === void 0 ? void 0 : _record$fields.completed)) {\n    record.fields.completed = false;\n  }\n\n  return {\n    id: record.id,\n    fields: record.fields\n  };\n};\n\nvar getMinifiedRecords = function getMinifiedRecords(records) {\n  return records.map(getMinifiedRecord);\n};\n\nvar AirtableDatabase = /*#__PURE__*/function (_Database) {\n  _inherits(AirtableDatabase, _Database);\n\n  var _super = _createSuper(AirtableDatabase);\n\n  function AirtableDatabase() {\n    _classCallCheck(this, AirtableDatabase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AirtableDatabase, [{\n    key: \"getAll\",\n    value: function () {\n      var _getAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var filter, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                filter = _ref.filter;\n                _context.next = 3;\n                return table.select({\n                  filterByFormula: \"\".concat(filter.field, \" = '\").concat(filter.value, \"'\")\n                }).firstPage();\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", getMinifiedRecords(data));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getAll(_x) {\n        return _getAll.apply(this, arguments);\n      }\n\n      return getAll;\n    }()\n  }, {\n    key: \"updateOne\",\n    value: function () {\n      var _updateOne = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new Error('Method not implemented');\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateOne() {\n        return _updateOne.apply(this, arguments);\n      }\n\n      return updateOne;\n    }()\n  }, {\n    key: \"deleteOne\",\n    value: function () {\n      var _deleteOne = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw new Error('Method not implemented');\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function deleteOne() {\n        return _deleteOne.apply(this, arguments);\n      }\n\n      return deleteOne;\n    }()\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw new Error('Method not implemented');\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function create() {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return AirtableDatabase;\n}(Database);\n\nvar airtableDatabase = new AirtableDatabase();\nexport { airtableDatabase, table, getMinifiedRecords, getMinifiedRecord };","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/utils/Airtable.js"],"names":["Database","Airtable","require","configure","apiKey","process","env","AIRTABLE_API_KEY","base","AIRTABLE_BASE_ID","table","AIRTABLE_TABLE_NAME","getMinifiedRecord","record","fields","completed","id","getMinifiedRecords","records","map","AirtableDatabase","filter","select","filterByFormula","field","value","firstPage","data","Error","airtableDatabase"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAD,QAAQ,CAACE,SAAT,CAAmB;AACjBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADH,CAAnB;AAGA,IAAMC,IAAI,GAAGP,QAAQ,CAACO,IAAT,CAAcH,OAAO,CAACC,GAAR,CAAYG,gBAA1B,CAAb;AAEA,IAAMC,KAAK,GAAGF,IAAI,CAACH,OAAO,CAACC,GAAR,CAAYK,mBAAb,CAAlB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AAAA;;AAClC,MAAI,oBAACA,MAAM,CAACC,MAAR,mDAAC,eAAeC,SAAhB,CAAJ,EAA+B;AAC7BF,IAAAA,MAAM,CAACC,MAAP,CAAcC,SAAd,GAA0B,KAA1B;AACD;;AACD,SAAO;AACLC,IAAAA,EAAE,EAAEH,MAAM,CAACG,EADN;AAELF,IAAAA,MAAM,EAAED,MAAM,CAACC;AAFV,GAAP;AAID,CARD;;AAUA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO,EAAI;AACpC,SAAOA,OAAO,CAACC,GAAR,CAAYP,iBAAZ,CAAP;AACD,CAFD;;IAIMQ,gB;;;;;;;;;;;;;;;;;;;;AACWC,gBAAAA,M,QAAAA,M;;uBACMX,KAAK,CACrBY,MADgB,CACT;AACNC,kBAAAA,eAAe,YAAKF,MAAM,CAACG,KAAZ,iBAAwBH,MAAM,CAACI,KAA/B;AADT,iBADS,EAIhBC,SAJgB,E;;;AAAbC,gBAAAA,I;iDAMCV,kBAAkB,CAACU,IAAD,C;;;;;;;;;;;;;;;;;;;;;;;;sBAGnB,IAAIC,KAAJ,CAAU,wBAAV,C;;;;;;;;;;;;;;;;;;;;;;;;sBAGA,IAAIA,KAAJ,CAAU,wBAAV,C;;;;;;;;;;;;;;;;;;;;;;;;sBAGA,IAAIA,KAAJ,CAAU,wBAAV,C;;;;;;;;;;;;;;;;;;;EAjBqB5B,Q;;AAoB/B,IAAM6B,gBAAgB,GAAG,IAAIT,gBAAJ,EAAzB;AAEA,SAAQS,gBAAR,EAA0BnB,KAA1B,EAAiCO,kBAAjC,EAAqDL,iBAArD","sourcesContent":["import Database from './Database'\n\nconst Airtable = require('airtable')\nAirtable.configure({\n  apiKey: process.env.AIRTABLE_API_KEY,\n})\nconst base = Airtable.base(process.env.AIRTABLE_BASE_ID)\n\nconst table = base(process.env.AIRTABLE_TABLE_NAME)\n\nconst getMinifiedRecord = record => {\n  if (!record.fields?.completed) {\n    record.fields.completed = false\n  }\n  return {\n    id: record.id,\n    fields: record.fields,\n  }\n}\n\nconst getMinifiedRecords = records => {\n  return records.map(getMinifiedRecord)\n}\n\nclass AirtableDatabase extends Database {\n  async getAll({ filter }) {\n    const data = await table\n      .select({\n        filterByFormula: `${filter.field} = '${filter.value}'`,\n      })\n      .firstPage()\n    \n    return getMinifiedRecords(data)\n  }\n  async updateOne() {\n    throw new Error('Method not implemented')\n  }\n  async deleteOne() {\n    throw new Error('Method not implemented')\n  }\n  async create() {\n    throw new Error('Method not implemented')\n  }\n}\nconst airtableDatabase = new AirtableDatabase()\n\nexport {airtableDatabase, table, getMinifiedRecords, getMinifiedRecord }\n"]},"metadata":{},"sourceType":"module"}