{"ast":null,"code":"import TodoModel from './Mongo/models/Todo';\nimport mongoose from 'mongoose';\nconst connection = {\n  isConnected: false\n};\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return;\n  }\n\n  try {\n    const dbConnection = await mongoose.connect(MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    connection.isConnected = !!dbConnection.connections[0].readyState;\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`);\n  }\n};\n\nclass MongoDatabase {\n  async getAll({\n    filter\n  }) {\n    console.log(filter);\n    const data = await TodoModel.find({\n      [filter.field]: filter.value\n    });\n    return data;\n  }\n\n  async updateOne({\n    id,\n    fields\n  }) {\n    const updatedRecords = await this.table.update([{\n      id,\n      fields\n    }]);\n    return getMinifiedRecord(updatedRecords[0]);\n  }\n\n  async deleteOne({\n    id\n  }) {\n    const deletedRecords = await table.destroy([id]);\n    return getMinifiedRecord(deletedRecords[0]);\n  }\n\n  async createOne() {\n    const createdRecords = await table.create([{\n      fields\n    }]);\n    const createdRecord = {\n      id: createdRecords[0].id,\n      fields: createdRecords[0].fields\n    };\n    return createdRecord;\n  }\n\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase();\n    this.connectDb = connectDb;\n  }\n\n  test() {\n    console.log('test');\n  }\n\n  async getAll(...props) {\n    console.log('hello');\n    await this.connectDb();\n    return await this.mongoDatabase.getAll(...props);\n  }\n\n  async updateOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.updateOne(...props);\n  }\n\n  async deleteOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.deleteOne(...props);\n  }\n\n  async create() {\n    this.connectDb();\n    throw new Error('Method not implemented');\n  }\n\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb);\nexport { mongoDatabase };","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/utils/Mongo.js"],"names":["TodoModel","mongoose","connection","isConnected","connectDb","dbConnection","connect","MONGO_URL","useNewUrlParser","useUnifiedTopology","connections","readyState","err","console","error","message","MongoDatabase","getAll","filter","log","data","find","field","value","updateOne","id","fields","updatedRecords","table","update","getMinifiedRecord","deleteOne","deletedRecords","destroy","createOne","createdRecords","create","createdRecord","MongoDatabaseProxy","constructor","mongoDatabase","test","props","Error"],"mappings":"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","sourcesContent":["import TodoModel from './Mongo/models/Todo'\nimport mongoose from 'mongoose'\nconst connection = {\n  isConnected: false,\n}\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return\n  }\n  try {\n    const dbConnection = await mongoose.connect(MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    })\n    connection.isConnected = !!dbConnection.connections[0].readyState\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`)\n  }\n}\n\nclass MongoDatabase {\n  async getAll({ filter }) {\n    console.log(filter)\n    const data = await TodoModel.find({ [filter.field]: filter.value })\n    return data\n  }\n  async updateOne({ id, fields }) {\n    const updatedRecords = await this.table.update([{ id, fields }])\n    return getMinifiedRecord(updatedRecords[0])\n  }\n  async deleteOne({ id }) {\n    const deletedRecords = await table.destroy([id])\n    return getMinifiedRecord(deletedRecords[0])\n  }\n  async createOne() {\n    const createdRecords = await table.create([\n      {\n        fields,\n      },\n    ])\n    const createdRecord = {\n      id: createdRecords[0].id,\n      fields: createdRecords[0].fields,\n    }\n    return createdRecord\n  }\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase()\n    this.connectDb = connectDb\n  }\n  test() {\n    console.log('test')\n  }\n  async getAll(...props) {\n    console.log('hello')\n    await this.connectDb()\n    return await this.mongoDatabase.getAll(...props)\n  }\n  async updateOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.updateOne(...props)\n  }\n  async deleteOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.deleteOne(...props)\n  }\n  async create() {\n    this.connectDb()\n    throw new Error('Method not implemented')\n  }\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb)\n\nexport { mongoDatabase }\n"]},"metadata":{},"sourceType":"module"}