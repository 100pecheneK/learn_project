{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport TodoModel from './Mongo/models/Todo';\nimport mongoose from 'mongoose';\nconst connection = {\n  isConnected: false\n};\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return;\n  }\n\n  try {\n    const dbConnection = await mongoose.connect(process.env.MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    connection.isConnected = !!dbConnection.connections[0].readyState;\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`);\n  }\n};\n\nfunction transformId(records) {\n  return records.map(record => ({\n    id: record._id.toString(),\n    fields: record.fields\n  }));\n}\n\nclass MongoDatabase {\n  async getAll({\n    filter\n  }) {\n    const data = await TodoModel.find({\n      [`fields.${filter.field}`]: filter.value\n    }).lean();\n    return transformId(data);\n  }\n\n  async updateOne({\n    id,\n    fields\n  }) {// const updatedRecords = await this.table.update([{ id, fields }])\n    // return getMinifiedRecord(updatedRecords[0])\n  }\n\n  async deleteOne({\n    id\n  }) {// const deletedRecords = await table.destroy([id])\n    // return getMinifiedRecord(deletedRecords[0])\n  }\n\n  async createOne({\n    fields\n  }) {\n    const record = new TodoModel({\n      fields: _objectSpread({}, fields)\n    });\n    await record.save();\n    return {\n      id: record._id,\n      fields: record.fields\n    };\n  }\n\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase();\n    this.connectDb = connectDb;\n  }\n\n  async getAll(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.getAll(...props);\n  }\n\n  async updateOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.updateOne(...props);\n  }\n\n  async deleteOne(...props) {\n    this.connectDb();\n    return await this.mongoDatabase.deleteOne(...props);\n  }\n\n  async create(...props) {\n    this.connectDb();\n    throw await this.mongoDatabase.createOne(...props);\n  }\n\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb);\nexport { mongoDatabase };","map":{"version":3,"sources":["/Users/misha/Documents/learn_project/JS/next-authenticated-todo-app/pages/api/utils/Mongo.js"],"names":["TodoModel","mongoose","connection","isConnected","connectDb","dbConnection","connect","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","connections","readyState","err","console","error","message","transformId","records","map","record","id","_id","toString","fields","MongoDatabase","getAll","filter","data","find","field","value","lean","updateOne","deleteOne","createOne","save","MongoDatabaseProxy","constructor","mongoDatabase","props","create"],"mappings":"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","sourcesContent":["import TodoModel from './Mongo/models/Todo'\nimport mongoose from 'mongoose'\n\nconst connection = {\n  isConnected: false,\n}\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return\n  }\n  try {\n    const dbConnection = await mongoose.connect(process.env.MONGO_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    })\n    connection.isConnected = !!dbConnection.connections[0].readyState\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`)\n  }\n}\n\nfunction transformId(records) {\n  return records.map(record => ({\n    id: record._id.toString(),\n    fields: record.fields,\n  }))\n}\n\nclass MongoDatabase {\n  async getAll({ filter }) {\n    const data = await TodoModel.find({\n      [`fields.${filter.field}`]: filter.value,\n    }).lean()\n    return transformId(data)\n  }\n  async updateOne({ id, fields }) {\n    // const updatedRecords = await this.table.update([{ id, fields }])\n    // return getMinifiedRecord(updatedRecords[0])\n  }\n  async deleteOne({ id }) {\n    // const deletedRecords = await table.destroy([id])\n    // return getMinifiedRecord(deletedRecords[0])\n  }\n  async createOne({ fields }) {\n    const record = new TodoModel({\n      fields: { ...fields },\n    })\n    await record.save()\n    return { id: record._id, fields: record.fields }\n  }\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase()\n    this.connectDb = connectDb\n  }\n  async getAll(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.getAll(...props)\n  }\n  async updateOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.updateOne(...props)\n  }\n  async deleteOne(...props) {\n    this.connectDb()\n    return await this.mongoDatabase.deleteOne(...props)\n  }\n  async create(...props) {\n    this.connectDb()\n    throw await this.mongoDatabase.createOne(...props)\n  }\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb)\n\nexport { mongoDatabase }\n"]},"metadata":{},"sourceType":"module"}