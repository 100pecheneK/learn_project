{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js\";\nimport { createContext, useState, useRef } from 'react';\nconst TodosContext = /*#__PURE__*/createContext();\n\nconst useGetSingleArticle = ({\n  articleId,\n  abortController = new AbortController()\n}) => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com';\n  const path = baseUrl + compile(GET_ARTICLE_PATH)({\n    articleId\n  });\n  const {\n    signal,\n    abort\n  } = abortController || {};\n  const articleRequest = fetch(path, {\n    signal: signal,\n    method: 'GET'\n  });\n  return [articleRequest, abort === null || abort === void 0 ? void 0 : abort.bind(abortController)];\n};\n\nconst TodosProvider = ({\n  children\n}) => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]);\n  const abortFuncs = useRef([]);\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos');\n      const latestTodos = await res.json();\n      setTodos(latestTodos);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({\n          description\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newTodo = await res.json();\n      setTodos(prevTodos => [newTodo, ...prevTodos]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos];\n        const existingTodo = existingTodos.find(todo => todo.id === updatedTodo.id);\n        existingTodo.fields = updatedTodo.fields;\n        return existingTodos;\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      await fetch('/api/deleteTodo', {\n        method: 'DELETE',\n        body: JSON.stringify({\n          id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosContext.Provider, {\n    value: {\n      todos,\n      setTodos,\n      refreshTodos,\n      updateTodo,\n      addTodo,\n      deleteTodo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\nexport { TodosProvider, TodosContext };","map":{"version":3,"sources":["/Users/misha/Desktop/nextblog/todo/contexts/TodosContext.js"],"names":["createContext","useState","useRef","TodosContext","useGetSingleArticle","articleId","abortController","AbortController","baseUrl","path","compile","GET_ARTICLE_PATH","signal","abort","articleRequest","fetch","method","bind","TodosProvider","children","todos","setTodos","abortFuncs","refreshTodos","res","latestTodos","json","e","console","error","addTodo","description","body","JSON","stringify","headers","newTodo","prevTodos","updateTodo","updatedTodo","existingTodos","existingTodo","find","todo","id","fields","deleteTodo","filter"],"mappings":"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","sourcesContent":["import { createContext, useState, useRef } from 'react'\nconst TodosContext = createContext()\n\nconst useGetSingleArticle = ({\n  articleId,\n  abortController = new AbortController(),\n}) => {\n  const baseUrl = 'https://jsonplaceholder.typicode.com'\n  const path = baseUrl + compile(GET_ARTICLE_PATH)({ articleId })\n  const { signal, abort } = abortController || {}\n  const articleRequest = fetch(path, {\n    signal: signal,\n    method: 'GET',\n  })\n\n  return [articleRequest, abort?.bind(abortController)]\n}\n\nconst TodosProvider = ({ children }) => {\n  const [todos, setTodos] = useState([])\n  const abortFuncs = useRef([])\n\n  const refreshTodos = async () => {\n    try {\n      const res = await fetch('/api/getTodos')\n      const latestTodos = await res.json()\n      setTodos(latestTodos)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const addTodo = async description => {\n    try {\n      const res = await fetch('/api/createTodo', {\n        method: 'POST',\n        body: JSON.stringify({ description }),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      const newTodo = await res.json()\n      setTodos(prevTodos => [newTodo, ...prevTodos])\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const updateTodo = async updatedTodo => {\n    try {\n      await fetch('/api/updateTodo', {\n        method: 'PUT',\n        body: JSON.stringify(updatedTodo),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      setTodos(prevTodos => {\n        const existingTodos = [...prevTodos]\n        const existingTodo = existingTodos.find(\n          todo => todo.id === updatedTodo.id\n        )\n        existingTodo.fields = updatedTodo.fields\n        return existingTodos\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const deleteTodo = async id => {\n    try {\n      await fetch('/api/deleteTodo', {\n        method: 'DELETE',\n        body: JSON.stringify({ id }),\n        headers: { 'Content-Type': 'application/json' },\n      })\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id))\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <TodosContext.Provider\n      value={{ todos, setTodos, refreshTodos, updateTodo, addTodo, deleteTodo }}\n    >\n      {children}\n    </TodosContext.Provider>\n  )\n}\nexport { TodosProvider, TodosContext }\n"]},"metadata":{},"sourceType":"module"}