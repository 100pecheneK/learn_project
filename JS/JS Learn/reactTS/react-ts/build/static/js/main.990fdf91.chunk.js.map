{"version":3,"sources":["components/Navbar/Navbar.tsx","components/TodoForm/Form.tsx","components/List/List.tsx","pages/TasksPage.tsx","pages/AboutPage.tsx","hooks/withFadeIn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","to","Form","onAdd","useState","title","setTitle","ref","useRef","onSubmit","value","className","htmlFor","type","id","onChange","e","target","onKeyPress","key","onClick","List","tasks","onDone","onDelete","map","task","classes","done","push","join","onDoubleClick","TasksPage","deleteWithoutConfirm","settings","setSettings","setTasks","useEffect","JSON","parse","localStorage","getItem","data","setItem","stringify","newTodo","Date","now","prevState","style","marginTop","checked","prev","length","confirm","filter","AboutPage","history","useHistory","withFadeIn","Child","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.990fdf91.chunk.js","sourcesContent":["import React from 'react'\nimport './Navbar.scss'\nimport {Link} from 'react-router-dom'\n\n\nconst Navbar: React.FC = () => {\n  return (\n    <nav>\n      <h1>React + TS</h1>\n      <ul>\n        <li><Link to=\"/\">Список дел</Link></li>\n        <li><Link to=\"/about\">Инфо</Link></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React, {useState, useRef} from 'react'\nimport './Form.scss'\n\n\ninterface IForm {\n  onAdd(title: string): void\n}\n\nconst Form: React.FC<IForm> = ({onAdd}) => {\n  const [title, setTitle] = useState<string>('')\n  const ref = useRef<HTMLInputElement>(null)\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value)\n  }\n\n  const onSubmit = (value: string) => {\n    if (value) {\n      onAdd(value)\n      setTitle('')\n    }\n  }\n\n  const keyPressHandler = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onSubmit(title)\n    }\n  }\n\n  const clickHandler = () => {\n    onSubmit(title)\n  }\n  return (\n    <div className='form'>\n      <div className='input-field'>\n        <label htmlFor=\"title\">Введите задачу</label>\n        <input\n          type=\"text\"\n          id='title'\n          ref={ref}\n          value={title}\n          onChange={changeHandler}\n          onKeyPress={keyPressHandler}\n        />\n      </div>\n      <button\n        className='btn'\n        onClick={clickHandler}\n      >\n        Добавить\n      </button>\n    </div>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport './List.scss'\nimport {ITask} from \"../../interfaces\"\n\n\ninterface IList {\n  tasks: ITask[],\n\n  onDone(id: number): void,\n\n  onDelete(id: number): void\n}\n\nconst List: React.FC<IList> = ({tasks, onDone, onDelete}) => {\n  const doubleClickHandler = (id: number) => {\n    onDelete(id)\n  }\n\n  const clickHandler = (id: number) => {\n    onDone(id)\n  }\n\n  return (\n    <div className='list'>\n      {tasks.map(task => {\n          const classes: string[] = ['list__item']\n          if (task.done) {\n            classes.push('list__item--done')\n          }\n          return (\n            <div\n              className={classes.join(' ')}\n              key={task.id}\n              onDoubleClick={() => doubleClickHandler(task.id)}\n              onClick={() => clickHandler(task.id)}\n            >\n              <h2>{task.title}</h2>\n            </div>\n          )\n        }\n      )}\n    </div>\n  )\n}\n\n\nexport default List\n","import React, {useEffect, useState} from 'react'\nimport Form from \"../components/TodoForm/Form\"\nimport List from \"../components/List/List\"\nimport {ITask} from \"../interfaces\"\n\n\ndeclare let confirm: (question: string) => boolean\n\nconst TasksPage: React.FC = () => {\n  const [settings, setSettings] = useState({deleteWithoutConfirm: false})\n  const [tasks, setTasks] = useState<ITask[]>([])\n\n  useEffect(() => {\n    const settings = JSON.parse(localStorage.getItem('settings') || '{}')\n    const data = JSON.parse(localStorage.getItem('tasks') || '[]') as ITask[]\n    setSettings(settings)\n    setTasks(data)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks])\n\n  useEffect(() => {\n    localStorage.setItem('settings', JSON.stringify(settings))\n  }, [settings])\n\n  const addHandler = (title: string) => {\n    const newTodo = {\n      id: Date.now(),\n      title,\n      done: false\n    }\n    setTasks(prevState => [...prevState, newTodo])\n  }\n\n  const doneHandler = (id: number) => {\n    setTasks(prevState => prevState.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          done: !task.done\n        }\n      }\n      return task\n    }))\n  }\n\n  const deleteHandler = (id: number) => {\n    if (settings.deleteWithoutConfirm || confirm('Вы уверены, что хотите удалить?')) {\n      setTasks(prevState => prevState.filter(task => task.id !== id))\n    }\n  }\n  return (\n    <>\n      <section className=\"container container--shadow\">\n        <h1>Список задач</h1>\n        <Form onAdd={addHandler}/>\n        <input\n          style={{marginTop: '1em'}}\n          id='deleteWithoutConfirm'\n          type=\"checkbox\"\n          checked={settings.deleteWithoutConfirm}\n          onChange={() => setSettings(prev => ({\n            ...prev,\n            deleteWithoutConfirm: !prev.deleteWithoutConfirm\n          }))}\n        />\n        <label htmlFor=\"deleteWithoutConfirm\">Удалять без подтверждения</label>\n      </section>\n      {\n        tasks.length > 0 && <section className=\"container container--shadow\">\n          <List\n            tasks={tasks}\n            onDone={doneHandler}\n            onDelete={deleteHandler}\n          />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default TasksPage\n","import React from 'react'\nimport {useHistory} from \"react-router\"\n\n\nconst AboutPage: React.FC = () => {\n  const history = useHistory()\n  return (\n    <section className=\"container container--shadow\">\n      <h1>О нас</h1>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab facere, quasi. Culpa dolore\n        dolorem ducimus ipsum iste, iure magnam numquam, officiis recusandae reiciendis rem\n        repellendus sed sunt tenetur ut? Ab beatae blanditiis commodi cum dignissimos ducimus ex,\n        fuga libero, necessitatibus odit perspiciatis ratione saepe totam vitae voluptate! Amet\n        commodi corporis, cum deleniti dolor exercitationem illum inventore, laborum magnam nihil\n        odio porro repudiandae suscipit voluptas voluptatum. A adipisci consectetur, dicta eum\n        exercitationem fuga id laudantium quis sed voluptatum. Adipisci architecto asperiores\n        consequuntur earum, illo illum libero modi non officiis quae quisquam, recusandae, tempore\n        ullam. Ab alias architecto eius ex id voluptatibus.</p>\n      <button onClick={() => history.push('/')}>Домой</button>\n    </section>\n  )\n}\n\nexport default AboutPage\n","import React from 'react'\nimport FadeIn from 'react-fade-in'\n\nconst withFadeIn = (Child: React.ComponentType) => {\n  return () => (\n    <FadeIn>\n      <Child />\n    </FadeIn>\n  )\n}\n\nexport default withFadeIn\n","import React from 'react'\nimport Navbar from './components/Navbar/Navbar'\nimport { Switch, BrowserRouter, Route } from 'react-router-dom'\nimport TasksPage from './pages/TasksPage'\nimport AboutPage from './pages/AboutPage'\nimport withFadeIn from './hooks/withFadeIn'\nimport FadeIn from 'react-fade-in'\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <Route exact path={'/'} component={withFadeIn(TasksPage)} />\n        <Route exact path={'/about'} component={withFadeIn(AboutPage)} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}